[core]
    excludesfile=~/.gitignore
    pager = delta
    whitespace=fix,-indent-with-non-tab,trailing-space,cr-at-eol

[init]
	defaultBranch = main
	templatedir = ~/.git_template

[apply]
	whitespace = warn

[branch]
	autosetuprebase = always
    sort = -committerdate

[color]
    branch = auto
    diff = auto
    interactive = auto
    pager = true
    status = auto

; [color "branch"]
;         current = yellow reverse
;         local = yellow
;         remote = green
;
; [color "diff"]
;         meta = yellow
;         frag = magenta
;         old = red
;         new = green
;
; [color "status"]
;         added = yellow
;         changed = green
;         untracked = cyan

[column]
    ui = auto

[commit]
    gpgsign = true
    template = ~/.git_template/commit_msg.txt
    verbose = true

[delta]
    detect-dark-light = always
    line-numbers = true
    navigate = true

[diff]
    algorithm = histogram
    colorMoved = plain
    compactionHeuristic = true
    mnemonicPrefix = true
    renames = true
    tool = diffsitter

[difftool]
    prompt = false

[difftool "diffsitter"]
    cmd = diffsitter "$LOCAL" "$REMOTE"

[fetch]
    all = true
    prune = true
    pruneTags = true

[help]
    autocorrect = prompt

[interactive]
    diffFilter = delta --color-only
[add.interactive]
    useBuiltin = false # required for git 2.37.0

[merge]
    ; conflictStyle = zdiff3
    conflictstyle = diff3

[pull]
	rebase = true

[push]
    autoSetupRemote = true
    default = simple
    followTags = true

[rebase]
    autoStash = true
    autosquash = true
    ; https://andrewlock.net/working-with-stacked-branches-in-git-is-easier-with-update-refs/
    updateRefs = true

[rerere]
    autoupdate = true
    enabled = true

[status]
    relativePaths = true

[tag]
    sort = version:refname

[alias]
    co = checkout
    amend = commit --amend
    br = branch
    catchup = log --patch --reverse --topo-order _ribbon..origin/master
    create-branch = !sh -c 'git push origin HEAD:refs/heads/$1 && git fetch origin && git branch --track $1 origin/$1 && cd . && git checkout $1' -
	cleanup = !git branch --merged | grep -v \"\\*\" | xargs -n 1 git branch -d
    dc = diff --cached
    delete-branch = !sh -c 'git push origin :refs/heads/$1 && git branch -D $1' -
    delete-merged-branches = "!sh -c 'git branch -r --merged | grep -v origin/master | sed -e \"s/origin\\///\" | while read branch; do git push origin --delete $branch; done'"
    graph = log --graph --all --decorate --stat --date=iso
    hist = log --graph --abbrev-commit --decorate --date=short \
        --format=format:'%C(bold cyan)%h%C(reset) %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)%an%C(reset) %C(bold yellow)%d%C(reset)' \
        --branches --remotes --tags
    l = "!. ~/.githelpers && pretty_git_log"
    la = !git l --all
    last = log -B -M -C --stat --summary --no-merges -1 HEAD
    lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%C(bold blue)<%an>%Creset' --abbrev-commit
    merge-branch = !git checkout master && git merge @{-1}
    merged = !git branch -r --merged | grep -v 'origin/master' | xargs -L1 git --no-pager log --pretty=tformat:'%Cgreen%d%Creset | %h | %an | %Cblue%ar%Creset' -1 | column -t -s '|'
    oldest-ancestor = !zsh -c 'diff --old-line-format='' --new-line-format='' <(git rev-list --first-parent "${1:-master}") <(git rev-list --first-parent "${2:-HEAD}") | head -1' -
    overview = log --all --oneline --no-merges
    promote-rel = !bash -c '[ "$#" = 1 ] && git checkout master && git pull && git fetch --tags origin && git merge --no-ff $1 && git push origin master && git rbranch -d $1 && git tag REL_`date +%Y-%m-%d`_$1 && git push --tags && exit 0 || echo \"usage: git promote-rel <branch>\" && exit 1' -
    r = !GIT_NO_PAGER=1 git l -30
    ra = !git r --all
    rb = !bash -c '[ "$#" = 0 ] && git branch -r && exit 0 || [ "$#" = 1 ] && git push origin origin:refs/heads/$1 && git fetch --tags origin && git checkout --track -b $1 origin/$1 && exit 0 || [ "$1" = "-d" -o "$1" = "-D" -a "$#" = 2 ] && git checkout master && git branch $1 "$2" && git push origin ":$2" && exit 0 || echo \"usage: git rb (<name>)\" && exit 1' -
    rbc = !bash -c '[ "$#" = 1 ] && git fetch --tags origin && git checkout --track -b $1 origin/$1 && exit 0 || echo \"usage: git rbc <name>\" && exit 1' -
    ready = rebase -i @{u}
	recent = branch --sort=-committerdate --format=\"%(committerdate:relative)%09%(refname:short)\"
    review = "!f() { for rev in $(git rev-list --reverse \"$@\"); do git show $rev; done; }; f"
    ribbon = tag --force _ribbon origin/master
    rlog = log --pretty=format:\"%H %Cblue%cr%Creset %cn %Cgreen%s%Creset\"
    ss = status -s
    statlog = log -B -M -C --stat --summary --no-merges
    tree = log --pretty=oneline --decorate --graph
    unmerged = !git branch -r --no-merged | grep -v 'origin/master' | xargs -L1 git --no-pager log --pretty=tformat:'%Cgreen%d%Creset | %h | %an | %Cblue%ar%Creset' -1 | column -t -s '|'
    update = "!f() { git pull && git submodule update --init; }; f"
    up = pull --rebase
    wip = for-each-ref --sort='authordate:iso8601' --format=' %(color:green)%(authordate:relative)%09%(color:white)%(refname:short)' refs/heads

[include]
    path = ~/.gitconfig.secret
[includeIf "gitdir:~/src/work/"]
    path = ~/src/work/.gitconfig
